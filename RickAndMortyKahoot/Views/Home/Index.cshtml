@using RickAndMortyKahoot.Controllers
@using RickAndMortyKahoot.Models.Users
@using System.Text.Json
@model User?
@{
    ViewData["Title"] = "Home";
}

<button onclick="openModal('create-user')">Register</button>
@if (Model is null)
{
  <partial name="_CreateUserForm" model="new UserPayload()" />
}
else
{
  @* <input type="hidden" id="user-data" value="@(JsonSerializer.Serialize(Model))" /> *@
  <input type="hidden" id="displayname" value="@(Model.Username)" />

  <h1>Hi, @(Model.Username)!</h1>
  <div class="button-panel">
    <button type="button" class="primary">Join game</button>
    <p class="or">or</p>
    <button type="button" class="primary">Create game</button>
  </div>

  <input type="text" id="message" />
  <input type="submit" id="sendmessage" />
  <div id="discussion"></div>

  <script>
    const connection = new signalR.HubConnectionBuilder()
      .withUrl("/kahoothub")
      .build();

    // Handle incoming messages (adjust based on your KahootHub server methods)
    connection.on("RecieveMessage", (user, message) => {
      $("#discussion").append(`
        <p>
          <b>${user}</b> <span>${message}</span>
        </p>
      `)
    });

    // Start the connection
    connection.start()
      .then(() => console.log("Connected to SignalR hub"))
      .catch(err => console.error("Connection failed: ", err));

    $("#sendmessage").on('click', () => {
      connection.invoke("SendMessage", $("#displayname").val(), $("#message").val());
    })
  </script>

@*   @section scripts {
  <!--Script references. -->
  <!--The jQuery library is required and is referenced by default in _Layout.cshtml. -->
  <!--Reference the SignalR library. -->
  <script src="~/js/jquery.signalR.min.js"></script>
  <!--Reference the autogenerated SignalR hub script. -->
  <script src="~/signalr/hubs"></script>
  <!--SignalR script to update the chat page and send messages.-->
  <script>
    $(function () {
      // Reference the auto-generated proxy for the hub.
      var chat = $.connection('/kahoothub');
      console.log(chat);
      // Create a function that the hub can call back to display messages.
      chat.RecieveMessage = function (name, message) {
        // Add the message to the page.
        $('#discussion').append('<li><strong>' + htmlEncode(name)
          + '</strong>: ' + htmlEncode(message) + '</li>');
      };
      // Set initial focus to message input box.
      $('#message').focus();
      // Start the connection.
      $.connection.hub.start().done(function (...data) {
        console.log('Hub started', data);
        $('#sendmessage').click(function () {
          // Call the Send method on the hub.
          chat.send("SendMessage", $('#displayname').val(), $('#message').val());
          // Clear text box and reset focus for next comment.
          $('#message').val('').focus();
        });
      });
    });
    // This optional function html-encodes messages for display in the page.
    function htmlEncode(value) {
      var encodedValue = $('<div />').text(value).html();
      return encodedValue;
    }
  </script>
  } *@
}